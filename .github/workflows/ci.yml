name: Rust Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    runs-on: ubuntu-latest # You can add more OS like macos-latest, windows-latest if needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: rust-lang/setup-rust@v1
        with:
          toolchain: stable # Or specify a specific version like '1.70.0'
          profile: minimal # Recommended for CI to speed up installation
          cache: true # Cache cargo registry and build outputs

      - name: Check code format
        run: cargo fmt --check

      - name: Run Clippy
        # Use --all-targets to check library, binaries, and tests
        # Use --all-features to check with all features enabled (adjust if needed)
        # Use --deny warnings to treat clippy warnings as errors
        run: cargo clippy --all-targets --all-features --deny warnings

      - name: Check compilation
        # This is faster than 'build' and catches most compilation errors
        run: cargo check --verbose

      - name: Build
        # Optional: Build the project. 'check' might be enough for many projects.
        # Use --release if you want to ensure the release build works.
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

    # Optional: If you have benchmarks, you might want to run them,
    # though they often require specific setup or different goals than
    # standard CI tests.
    # - name: Run benchmarks (if applicable)
    #   run: cargo bench # Note: Benchmarks often require running outside the CI loop or with specific flags
